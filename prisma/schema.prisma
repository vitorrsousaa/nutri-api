// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String @id @default(uuid()) @db.Uuid()
  email    String @unique
  name     String
  password String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  hash      Float?   @map("hash")

  patient      Patient[]
  planningMeal PlanningMeal[]

  @@map("users")
}

enum GenderType {
  MASC
  FEM

  @@map("gender_types")
}

enum StatusType {
  ACTIVE
  INACTIVE

  @@map("status_types")
}

model Patient {
  id        String      @id @default(uuid()) @db.Uuid()
  userId    String      @map("user_id") @db.Uuid()
  email     String      @unique
  name      String
  birthDate DateTime?
  weight    Float?
  height    Float?
  gender    GenderType?
  status    StatusType? @default(ACTIVE)

  planningMeal PlanningMeal[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("patients")
}

model PlanningMeal {
  id        String @id @default(uuid()) @db.Uuid()
  userId    String @map("user_id") @db.Uuid()
  patientId String @map("patient_id") @db.Uuid()

  description String?

  meals Meal[]

  patient Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("plannings_meal")
}

model Meal {
  id             String  @id @default(uuid()) @db.Uuid()
  planningMealId String? @map("planning_meal_id") @db.Uuid()

  name String
  time DateTime

  planningMeal PlanningMeal? @relation(fields: [planningMealId], references: [id], onDelete: Cascade)
  mealFoods    MealFood[]

  @@map("meals")
}

model MealFood {
  id     String  @id @default(uuid()) @db.Uuid()
  mealId String? @map("meal_id") @db.Uuid()

  name       String
  foodOrigin String @map("food_origin")
  foodId     String @map("food_id")
  quantity   Float
  calories   Float
  protein    Float
  fat        Float
  carb       Float
  baseUnit   String @map("base_unit")

  meal Meal? @relation(fields: [mealId], references: [id], onDelete: Cascade)

  @@map("meal_foods")
}

model Food {
  id           String @id @default(uuid()) @db.Uuid()
  name         String
  baseQty      Float  @map("base_qty")
  baseUnit     String @map("base_unit")
  categoryName String @map("category_name")

  attributes Json[]

  @@map("foods")
}
